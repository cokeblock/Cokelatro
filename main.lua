-- FILE GENERATED BY JOKER FORGE
-- ** If you find any bugs, or have suggestions, please report them on the GitHub repository: https://github.com/Jayd-H/joker-forge/issues **

-- Atlas
SMODS.Atlas({
    key = "CustomJokers", 
    path = "CustomJokers.png", 
    px = 71,
    py = 95, 
    atlas_table = "ASSET_ATLAS"
}):register()

SMODS.Joker{ --Etched Joker
    name = "Etched Joker",
    key = "etchedjoker",
    config = {
        extra = {
        }
    },
    loc_txt = {
        ['name'] = 'Etched Joker',
        ['text'] = {
            [1] = 'If first {C:planet}poker hand{} of round is a',
            [2] = '{C:attention}5 card hand{}, duplicate {E:1}every{} {C:dark_edition}scored card{}'
        }
    },
    pos = {
        x = 0,
        y = 0
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = false,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 1,
        y = 0
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if (#context.scoring_hand == 5 and G.GAME.current_round.hands_played == 0) then
                local cards_to_copy = {}
                for i, c in ipairs(context.full_hand) do
                    table.insert(cards_to_copy, c)
                end
                
                for i, source_card in ipairs(cards_to_copy) do
                    G.playing_card = (G.playing_card and G.playing_card + 1) or 1
                    local copied_card = copy_card(source_card, nil, nil, G.playing_card)
                    copied_card:add_to_deck()
                    G.deck.config.card_limit = G.deck.config.card_limit + 1
                    G.deck:emplace(copied_card)
                    table.insert(G.playing_cards, copied_card)
                    playing_card_joker_effects({true})
                    
                    G.E_MANAGER:add_event(Event({
                        func = function() 
                            copied_card:start_materialize()
                            return true
                        end
                    }))
                end
                return {
                    message = "Etched!"
                }
            end
        end
    end
}

SMODS.Joker{ --J.O.K.E.R
    name = "J.O.K.E.R",
    key = "joker",
    config = {
        extra = {
            doohivket = 1,
            odds = 5
        }
    },
    loc_txt = {
        ['name'] = 'J.O.K.E.R',
        ['text'] = {
            [1] = 'Every time a {E:1}consumable{} is {C:attention}used{},',
            [2] = '{C:green}1 in 5 chance{} a held',
            [3] = 'consumable {C:attention}duplicates{} and becomes {C:dark_edition}negative{}'
        }
    },
    pos = {
        x = 2,
        y = 0
    },
    cost = 7,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 3,
        y = 0
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.using_consumeable and not context.blueprint then
                if pseudorandom('group_0_076d5d43') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
            local target_cards = {}
            for i, consumable in ipairs(G.consumeables.cards) do
                table.insert(target_cards, consumable)
            end
            if #target_cards > 0  then
                local card_to_copy = pseudorandom_element(target_cards, pseudoseed('copy_consumable'))
                
                G.E_MANAGER:add_event(Event({
                    func = function()
                        local copied_card = copy_card(card_to_copy)
                        copied_card:set_edition("e_negative", true)
                        copied_card:add_to_deck()
                        G.consumeables:emplace(copied_card)
                        
                        return true
                    end
                }))
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "DUPED!", colour = G.C.GREEN})
            end
                    return true
                end}, card)
                    end
        end
    end
}

SMODS.Joker{ --the legend
    name = "the legend",
    key = "thelegend",
    config = {
        extra = {
            mult = 4,
            Xmult = 4,
            emult = 4
        }
    },
    loc_txt = {
        ['name'] = 'the legend',
        ['text'] = {
            [1] = '{E:1}{C:dark_edition}THE ONE AND ONLY JOKER{}',
            [2] = '{C:red}+4{} Mult',
            [3] = '{X:red,C:white}X4{} Mult',
            [4] = '{C:dark_edition}^4{} Mult'
        }
    },
    pos = {
        x = 4,
        y = 0
    },
    cost = 20,
    rarity = 4,
    blueprint_compat = true,
    eternal_compat = false,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 5,
        y = 0
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    mult = card.ability.extra.mult,
                    extra = {
                        Xmult = card.ability.extra.Xmult,
                        extra = {
                            e_mult = card.ability.extra.emult,
                            colour = G.C.DARK_EDITION
                        }
                        }
                }
        end
    end
}

SMODS.Joker{ --Jarrys joke
    name = "Jarrys joke",
    key = "jarrysjoke",
    config = {
        extra = {
            powermult = 1,
            j_joker = 0
        }
    },
    loc_txt = {
        ['name'] = 'Jarrys joke',
        ['text'] = {
            [1] = 'gains {X:edition,C:dark_edition}^0.5{} Mult {C:attention}at end of shop{}.',
            [2] = 'destroys {X:attention,C:white}all{} jokers at end of shop.',
            [3] = '{C:inactive}(must have at least 1 additional joker){}',
            [4] = '{C:inactive}(currently {}{X:edition,C:dark_edition}^#1#{} {C:inactive}Mult){}'
        }
    },
    pos = {
        x = 6,
        y = 0
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 7,
        y = 0
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.powermult}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    e_mult = card.ability.extra.powermult
                }
        end
        if context.ending_shop and not context.blueprint then
            if #G.jokers.cards > 1 then
                return {
                    func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "⠀", colour = G.C.RED})
                end
                    return true
                end,
                    extra = {
                        func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "⠀", colour = G.C.RED})
                end
                    return true
                end,
                        colour = G.C.RED,
                        extra = {
                            func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "⠀", colour = G.C.RED})
                end
                    return true
                end,
                            colour = G.C.RED,
                        extra = {
                            func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "⠀", colour = G.C.RED})
                end
                    return true
                end,
                            colour = G.C.RED,
                        extra = {
                            func = function()
                    card.ability.extra.powermult = (card.ability.extra.powermult) + 0.5
                    return true
                end,
                            message = "[Codebase-mult-jkr]",
                            colour = G.C.GREEN
                        }
                        }
                        }
                        }
                }
            end
        end
    end
}

SMODS.Joker{ --Coupon
    name = "Coupon",
    key = "coupon",
    config = {
        extra = {
            percentprice = -25,
            voucher = 0
        }
    },
    loc_txt = {
        ['name'] = 'Coupon',
        ['text'] = {
            [1] = 'Create a {C:attention}Voucher{} tag',
            [2] = 'at end of shop'
        }
    },
    pos = {
        x = 8,
        y = 0
    },
    cost = 10,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.ending_shop and not context.blueprint then
                return {
                    func = function()
            G.E_MANAGER:add_event(Event({
                func = function()
                    local tag = Tag("tag_voucher")
                    tag:set_ability()
                    add_tag(tag)
                    play_sound('holo1', 1.2 + math.random() * 0.1, 0.4)
                    return true
                end
            }))
                    return true
                end,
                    message = "+1 VOUCHER!"
                }
        end
    end
}

SMODS.Joker{ --EXE
    name = "EXE",
    key = "exe",
    config = {
        extra = {
            devoured = 1,
            Money = -10,
            j_cokelatr_exe = 0,
            j_joker = 0
        }
    },
    loc_txt = {
        ['name'] = 'EXE',
        ['text'] = {
            [1] = 'when boss blind defeated. {C:attention}Deletes{} a random {C:attention}',
            [2] = 'joker{} and gains {X:chips,C:edition}^0.5{}{} Chips',
            [3] = '{C:inactive}(currently {}{C:edition}{X:chips,C:edition}^#1#{}{C:inactive} Chips){}'
        }
    },
    pos = {
        x = 9,
        y = 0
    },
    cost = 20,
    rarity = 4,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 0,
        y = 1
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.devoured}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    e_chips = card.ability.extra.devoured
                }
        end
        if context.selling_self and not context.blueprint then
                return {
                    func = function()
            local created_joker = false
                if #G.jokers.cards + G.GAME.joker_buffer < G.jokers.config.card_limit then
                    created_joker = true
                    G.GAME.joker_buffer = G.GAME.joker_buffer + 1
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            local joker_card = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_cokelatr_exe')
                            joker_card:add_to_deck()
                            G.jokers:emplace(joker_card)
                            G.GAME.joker_buffer = 0
                            return true
                        end
                    }))
                end
            if created_joker then
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "NO ESCAPE!", colour = G.C.BLUE})
            end
            return true
        end,
                    extra = {
                        dollars = card.ability.extra.Money
                        }
                }
        end
        if context.end_of_round and context.main_eval and G.GAME.blind.boss and not context.blueprint then
                return {
                    func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "CODE EATEN!", colour = G.C.RED})
                end
                    return true
                end,
                    extra = {
                        func = function()
                    card.ability.extra.devoured = (card.ability.extra.devoured) + 0.5
                    return true
                end,
                        colour = G.C.GREEN
                        }
                }
        end
    end
}

SMODS.Joker{ --KID NAMED FINGER
    name = "KID NAMED FINGER",
    key = "kidnamedfinger",
    config = {
        extra = {
            Discards = 0,
            discardsusedthisround = 0,
            emult = 1.5
        }
    },
    loc_txt = {
        ['name'] = 'KID NAMED FINGER',
        ['text'] = {
            [1] = 'If no {C:red}discards {}are used and played',
            [2] = '{C:blue}hand{} is a high card, {C:dark_edition}^1.5 Mult{}',
            [3] = 'on {C:attention}first hand{} of round'
        }
    },
    pos = {
        x = 1,
        y = 1
    },
    cost = 8,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if (context.scoring_name == "High Card" and G.GAME.current_round.hands_played == 0 and (card.ability.extra.Discards or 0) == G.GAME.current_round.discards_used) then
                return {
                    e_mult = card.ability.extra.emult,
                    message = "PAINTED WHITE!"
                }
            end
        end
    end
}

SMODS.Joker{ --MACHINEID V1
    name = "MACHINEID V1",
    key = "machineidv1",
    config = {
        extra = {
            coins = 1
        }
    },
    loc_txt = {
        ['name'] = 'MACHINEID V1',
        ['text'] = {
            [1] = 'Gains {X:red,C:white}X0.1{} Mult per scored card',
            [2] = 'if played hand contains exactly four {C:attention}Gold{} cards',
            [3] = '{C:inactive}(currently{} {X:mult,C:white}X#1#{}{C:inactive} Mult){}'
        }
    },
    pos = {
        x = 2,
        y = 1
    },
    cost = 8,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.coins}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if (SMODS.get_enhancements(context.other_card)["m_gold"] == true and #context.scoring_hand == 4) then
                card.ability.extra.coins = (card.ability.extra.coins) + 0.1
                return {
                    message = "COIN!"
                }
            end
        end
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    Xmult = card.ability.extra.coins
                }
        end
    end
}

SMODS.Joker{ --Bill cipher
    name = "Bill cipher",
    key = "billcipher",
    config = {
        extra = {
            emult = 3,
            emult1 = 3
        }
    },
    loc_txt = {
        ['name'] = 'Bill cipher',
        ['text'] = {
            [1] = '{C:dark_edition}^3^3{} Mult'
        }
    },
    pos = {
        x = 3,
        y = 1
    },
    cost = 50,
    rarity = 4,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 4,
        y = 1
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    e_mult = card.ability.extra.emult,
                    extra = {
                        e_mult = card.ability.extra.emult1,
                        colour = G.C.DARK_EDITION
                        }
                }
        end
    end
}

SMODS.Joker{ --Journal 1
    name = "Journal 1",
    key = "journal1",
    config = {
        extra = {
            mult = 6
        }
    },
    loc_txt = {
        ['name'] = 'Journal 1',
        ['text'] = {
            [1] = '{C:red}+6{} Mult',
            [2] = '{E:1}{C:gold}the process has begun{}.{}'
        }
    },
    pos = {
        x = 5,
        y = 1
    },
    cost = 4,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = false,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    mult = card.ability.extra.mult,
                    extra = {
                        message = "HAHAHA",
                        colour = G.C.YELLOW
                        }
                }
        end
    end
}

SMODS.Joker{ --Journal 2
    name = "Journal 2",
    key = "journal2",
    config = {
        extra = {
            Xmult = 4
        }
    },
    loc_txt = {
        ['name'] = 'Journal 2',
        ['text'] = {
            [1] = '{X:red,C:white}X4{} Mult',
            [2] = '{C:gold}we\'ll, meet again!',
            [3] = '{C:gold}dont know where, dont know when!{}'
        }
    },
    pos = {
        x = 6,
        y = 1
    },
    cost = 5,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = false,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    in_pool = function(self, args)
        return false
    end,

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    Xmult = card.ability.extra.Xmult
                }
        end
    end
}

SMODS.Joker{ --Journal 3
    name = "Journal 3",
    key = "journal3",
    config = {
        extra = {
            odds = 2,
            emult = 1.5
        }
    },
    loc_txt = {
        ['name'] = 'Journal 3',
        ['text'] = {
            [1] = '{C:green}1 in 2 chance{} for {C:dark_edition}^1.5{} Mult',
            [2] = '{C:gold}good ol 6 fingers!{}'
        }
    },
    pos = {
        x = 7,
        y = 1
    },
    cost = 6,
    rarity = 3,
    blueprint_compat = true,
    eternal_compat = false,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                if pseudorandom('group_0_01ec05fa') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({e_mult = card.ability.extra.emult}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "HAHAHA", colour = G.C.DARK_EDITION})
                    end
        end
    end
}

SMODS.Joker{ --JKR//1011101
    name = "JKR//1011101",
    key = "jkr1011101",
    config = {
        extra = {
            odds = 4,
            odds2 = 6,
            odds3 = 8,
            odds4 = 30,
            odds5 = 2,
            xchips = 2,
            echips = 0.5,
            emult = 2,
            Xmult = 1011,
            set_dollars = 0,
            sell_value = 1101,
            hands = 2,
            hands1 = 2,
            discards = 5,
            discards1 = 8
        }
    },
    loc_txt = {
        ['name'] = 'JKR//1011101',
        ['text'] = {
            [1] = '{C:green}1100010011{}110010{C:green}10111{}',
            [2] = '{C:inactive}{{C:green}{C:inactive}(cu{}{}%^&ren{C:green} t*l{}{C:inactive}y{}{}'
        }
    },
    pos = {
        x = 8,
        y = 1
    },
    cost = 8,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                if pseudorandom('group_0_23d2697b') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({xchips = card.ability.extra.xchips}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "110101111err", colour = G.C.WHITE})
                    end
                if pseudorandom('group_1_2a194631') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({e_chips = card.ability.extra.echips}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "mult", colour = G.C.DARK_EDITION})
                    end
                if pseudorandom('group_2_0c497f05') < G.GAME.probabilities.normal / card.ability.extra.odds2 then
                        SMODS.calculate_effect({e_mult = card.ability.extra.emult}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "[]system10111", colour = G.C.DARK_EDITION})
                    end
                if pseudorandom('group_3_62165083') < G.GAME.probabilities.normal / card.ability.extra.odds3 then
                        SMODS.calculate_effect({Xmult = card.ability.extra.Xmult}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "10111-101011-1011", colour = G.C.WHITE})
                    end
                if pseudorandom('group_4_0906cd88') < G.GAME.probabilities.normal / card.ability.extra.odds4 then
                        SMODS.calculate_effect({func = function()
                local target_amount = card.ability.extra.set_dollars
                local current_amount = G.GAME.dollars
                local difference = target_amount - current_amount
                ease_dollars(difference)
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "N--110er11d", colour = G.C.MONEY})
                return true
            end}, card)
                    end
                if pseudorandom('group_5_355e477b') < G.GAME.probabilities.normal / card.ability.extra.odds4 then
                        card.ability.extra_value = (card.ability.extra_value or 0) + card.ability.extra.sell_value
            card:set_cost()
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "10111rches-rags10011", colour = G.C.MONEY})
                    end
        end
        if context.ending_shop and not context.blueprint then
                if pseudorandom('group_0_128dc354') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "CDE:HNDS1", colour = G.C.GREEN})
                G.GAME.current_round.hands_left = G.GAME.current_round.hands_left + card.ability.extra.hands
                return true
            end}, card)
                    end
                if pseudorandom('group_1_ac2e92d9') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "CDE:HNDS-1", colour = G.C.RED})
                G.GAME.current_round.hands_left = math.max(0, G.GAME.current_round.hands_left - card.ability.extra.hands1)
                return true
            end}, card)
                    end
                if pseudorandom('group_2_bebfe287') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "CDE:DSCRDS1", colour = G.C.ORANGE})
                G.GAME.current_round.discards_left = G.GAME.current_round.discards_left + card.ability.extra.discards
                return true
            end}, card)
                    end
                if pseudorandom('group_3_a535f822') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "CDE:DSCRDS-1", colour = G.C.RED})
                G.GAME.current_round.discards_left = math.max(0, G.GAME.current_round.discards_left - card.ability.extra.discards1)
                return true
            end}, card)
                    end
                if pseudorandom('group_4_174ca16a') < G.GAME.probabilities.normal / card.ability.extra.odds2 then
                        SMODS.calculate_effect({func = function()
            if G.GAME.blind and G.GAME.blind.boss and not G.GAME.blind.disabled then
                G.E_MANAGER:add_event(Event({
                    func = function()
                        G.GAME.blind:disable()
                        play_sound('timpani')
                        return true
                    end
                }))
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "BSS:ERR", colour = G.C.GREEN})
            end
                    return true
                end}, card)
                    end
                if pseudorandom('group_5_d4f3c421') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "CDE:HNDSZ1", colour = G.C.BLUE})
                G.hand:change_size(8)
                return true
            end}, card)
                    end
                if pseudorandom('group_6_92d170d1') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "CDE:HNDSZ-1", colour = G.C.RED})
                G.hand:change_size(-4)
                return true
            end}, card)
                    end
        end
    end
}

SMODS.Joker{ --ANYTHING AND EVERYTHING
    name = "ANYTHING AND EVERYTHING",
    key = "anythingandeverything",
    config = {
        extra = {
            Allowedjokers = 1,
            jokercount = 0,
            j_joker = 0
        }
    },
    loc_txt = {
        ['name'] = 'ANYTHING AND EVERYTHING',
        ['text'] = {
            [1] = 'Gains {X:red,C:white}X1{} Mult per {C:attention}Joker{} owned.',
            [2] = 'if more than {X:attention,C:white}#1#{} jokers are owned',
            [3] = '{C:attention}destroy{} all jokers, including itself',
            [4] = '{C:inactive}(increases allowed joker amount when boss blind defeated){}',
            [5] = '{C:inactive}(current {}{X:mult,C:white}X#3#{} {C:inactive}Mult){}'
        }
    },
    pos = {
        x = 9,
        y = 1
    },
    cost = 7,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.Allowedjokers, card.ability.extra.j_joker, #G.jokers.cards}}
    end,

    calculate = function(self, card, context)
        if context.buying_card and not context.blueprint then
            if #G.jokers.cards > 0 then
                return {
                    func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "Destroyed!", colour = G.C.RED})
                end
                    return true
                end,
                    extra = {
                        func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "Destroyed!", colour = G.C.RED})
                end
                    return true
                end,
                        colour = G.C.RED,
                        extra = {
                            func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "Destroyed!", colour = G.C.RED})
                end
                    return true
                end,
                            colour = G.C.RED,
                        extra = {
                            func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "Destroyed!", colour = G.C.RED})
                end
                    return true
                end,
                            colour = G.C.RED,
                        extra = {
                            func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "Destroyed!", colour = G.C.RED})
                end
                    return true
                end,
                            colour = G.C.RED,
                        extra = {
                            func = function()
                local destructable_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    if joker ~= card and not joker.ability.eternal and not joker.getting_sliced then
                        table.insert(destructable_jokers, joker)
                    end
                end
                local target_joker = #destructable_jokers > 0 and pseudorandom_element(destructable_jokers, pseudoseed('destroy_joker')) or nil
                
                if target_joker then
                    target_joker.getting_sliced = true
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            target_joker:start_dissolve({G.C.RED}, nil, 1.6)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "Destroyed!", colour = G.C.RED})
                end
                    return true
                end,
                            colour = G.C.RED,
                        extra = {
                            func = function()
                card:start_dissolve()
                return true
            end,
                            message = "Destroyed!",
                            colour = G.C.RED,
                        extra = {
                            message = "APATHY IS A TRAGEDY AND BOREDOM IS A CRIME",
                            colour = G.C.RED
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                }
            end
        end
        if context.end_of_round and context.main_eval and G.GAME.blind.boss and not context.blueprint then
                return {
                    func = function()
                    card.ability.extra.Allowedjokers = (card.ability.extra.Allowedjokers) + 1
                    return true
                end,
                    message = "ALL OF THE TIME!"
                }
        end
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    Xmult = #G.jokers.cards
                }
        end
    end
}

SMODS.Joker{ --Wild Joker
    name = "Wild Joker",
    key = "wildjoker",
    config = {
        extra = {
            Xmult = 1.25
        }
    },
    loc_txt = {
        ['name'] = 'Wild Joker',
        ['text'] = {
            [1] = '{C:attention}Wild{} cards each give',
            [2] = '{X:red,C:white}X1.2{}{} Mult when scored'
        }
    },
    pos = {
        x = 0,
        y = 2
    },
    cost = 4,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if SMODS.get_enhancements(context.other_card)["m_wild"] == true then
                return {
                    Xmult = card.ability.extra.Xmult
                }
            end
        end
    end
}

SMODS.Joker{ --Missing Texture
    name = "Missing Texture",
    key = "missingtexture",
    config = {
        extra = {
            JKR = 1,
            mult = 32,
            mult1 = 8,
            mult2 = 16,
            mult3 = 24
        }
    },
    loc_txt = {
        ['name'] = 'Missing Texture',
        ['text'] = {
            [1] = '{C:red}+8{} Mult per empty {C:attention}joker{} slot'
        }
    },
    pos = {
        x = 1,
        y = 2
    },
    cost = 4,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if #G.jokers.cards == 1 then
                return {
                    mult = card.ability.extra.mult
                }
            elseif #G.jokers.cards == 4 then
                return {
                    mult = card.ability.extra.mult1
                }
            elseif #G.jokers.cards == 3 then
                return {
                    mult = card.ability.extra.mult2
                }
            elseif #G.jokers.cards == 2 then
                return {
                    mult = card.ability.extra.mult3
                }
            end
        end
    end
}

SMODS.Joker{ --Insane Joker
    name = "Insane Joker",
    key = "insanejoker",
    config = {
        extra = {
            mult = 16
        }
    },
    loc_txt = {
        ['name'] = 'Insane Joker',
        ['text'] = {
            [1] = '{C:red}+16{} Mult if played hand',
            [2] = 'contains {C:attention}four of a kind{}'
        }
    },
    pos = {
        x = 2,
        y = 2
    },
    cost = 4,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if next(context.poker_hands["Four of a Kind"]) then
                return {
                    mult = card.ability.extra.mult
                }
            end
        end
    end
}

SMODS.Joker{ --Demented Joker
    name = "Demented Joker",
    key = "dementedjoker",
    config = {
        extra = {
        }
    },
    loc_txt = {
        ['name'] = 'Demented Joker',
        ['text'] = {
            [1] = '{C:red}+24{} Mult if played hand',
            [2] = 'contains {C:attention}Flush house{}'
        }
    },
    pos = {
        x = 3,
        y = 2
    },
    cost = 5,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if next(context.poker_hands["Flush House"]) then
            end
        end
    end
}

SMODS.Joker{ --Deranged Joker
    name = "Deranged Joker",
    key = "derangedjoker",
    config = {
        extra = {
        }
    },
    loc_txt = {
        ['name'] = 'Deranged Joker',
        ['text'] = {
            [1] = '{C:red}+32{} Mult if played',
            [2] = 'hand contains {C:attention}Five of a Kind{}'
        }
    },
    pos = {
        x = 4,
        y = 2
    },
    cost = 5,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if next(context.poker_hands["Five of a Kind"]) then
            end
        end
    end
}

SMODS.Joker{ --Hysterical Joker
    name = "Hysterical Joker",
    key = "hystericaljoker",
    config = {
        extra = {
        }
    },
    loc_txt = {
        ['name'] = 'Hysterical Joker',
        ['text'] = {
            [1] = '{C:red}+40{} Mult if played hand',
            [2] = 'contains {C:attention}Flush Five{}'
        }
    },
    pos = {
        x = 5,
        y = 2
    },
    cost = 5,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if next(context.poker_hands["Five of a Kind"]) then
            end
        end
    end
}

SMODS.Joker{ --Crypto Scam
    name = "Crypto Scam",
    key = "cryptoscam",
    config = {
        extra = {
            MoneyX = 2,
            set_dollars = 0
        }
    },
    loc_txt = {
        ['name'] = 'Crypto Scam',
        ['text'] = {
            [1] = 'Gain {C:money}#1# Dollars{} at end of round.',
            [2] = 'if {C:money}money{} is {X:money,C:white}0{} Multiply payout by {X:red,C:white}X2{}',
            [3] = 'at {X:money,C:white}100{} {C:money}Dollars{}, Multiplys it by {X:red,C:white}X4{}{} instead',
            [4] = '{C:inactive,E:1}(if your money is not at either number at end',
            [5] = '{C:inactive,E:1}of round, destroys itself and sets money to 0){}{}{}'
        }
    },
    pos = {
        x = 6,
        y = 2
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = true,
    eternal_compat = false,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.MoneyX}}
    end,

    calculate = function(self, card, context)
        if context.end_of_round and context.game_over == false and context.main_eval and not context.blueprint then
            if G.GAME.dollars == 0 then
                return {
                    func = function()
                    card.ability.extra.MoneyX = (card.ability.extra.MoneyX) * 2
                    return true
                end,
                    message = "PUMPED!",
                    extra = {
                        dollars = card.ability.extra.MoneyX
                        }
                }
            elseif G.GAME.dollars == 100 then
                return {
                    func = function()
                    card.ability.extra.MoneyX = (card.ability.extra.MoneyX) * 4
                    return true
                end,
                    message = "PUMPED!",
                    extra = {
                        dollars = card.ability.extra.MoneyX
                        }
                }
            elseif (G.GAME.dollars ~= 100 and G.GAME.dollars ~= 0) then
                return {
                    func = function()
                local target_amount = card.ability.extra.set_dollars
                local current_amount = G.GAME.dollars
                local difference = target_amount - current_amount
                ease_dollars(difference)
                card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "DUMPED!", colour = G.C.MONEY})
                return true
            end,
                    extra = {
                        func = function()
                card:start_dissolve()
                return true
            end,
                            message = "Destroyed!",
                        colour = G.C.RED
                        }
                }
            end
        end
    end
}

SMODS.Joker{ --Hiding Graphs
    name = "Hiding Graphs",
    key = "hidinggraphs",
    config = {
        extra = {
            JOKE = 0,
            repetitions = 4,
            Xmult = 8
        }
    },
    loc_txt = {
        ['name'] = 'Hiding Graphs',
        ['text'] = {
            [1] = '{C:attention}First{} played {C:attention}King{} gives {X:red,C:white}X8{} Mult when scored',
            [2] = 'retrigger first {C:attention}card{} played {C:attention}4 additional{} times'
        }
    },
    pos = {
        x = 7,
        y = 2
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.repetition and context.cardarea == G.play then
            if (context.other_card:get_id() == 13 and (card.ability.extra.JOKE or 0) == 1) then
                return {
                    repetitions = card.ability.extra.repetitions,
                    message = localize('k_again_ex')
                }
            end
        end
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if (context.other_card:get_id() == 13 and (card.ability.extra.JOKE or 0) == 1) then
                card.ability.extra.JOKE = 0
                return {
                    Xmult = card.ability.extra.Xmult
                }
            end
        end
        if context.cardarea == G.jokers and context.joker_main then
                card.ability.extra.JOKE = 1
        end
    end
}

SMODS.Joker{ --PokeBall
    name = "PokeBall",
    key = "pokeball",
    config = {
        extra = {
            j_joker = 0,
            odds = 10
        }
    },
    loc_txt = {
        ['name'] = 'PokeBall',
        ['text'] = {
            [1] = 'At end of round, {C:green}1 in 10 chance{}',
            [2] = 'to {C:attention}duplicate{} a random {C:attention}Joker{} and make it {C:dark_edition,E:1}negative{}'
        }
    },
    pos = {
        x = 8,
        y = 2
    },
    cost = 20,
    rarity = 4,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 9,
        y = 2
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.end_of_round and context.game_over == false and context.main_eval and not context.blueprint then
                if pseudorandom('group_0_a2272c3a') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({func = function()
                local available_jokers = {}
                for i, joker in ipairs(G.jokers.cards) do
                    table.insert(available_jokers, joker)
                end
                local target_joker = #available_jokers > 0 and pseudorandom_element(available_jokers, pseudoseed('copy_joker')) or nil
                
                if target_joker then
                    G.E_MANAGER:add_event(Event({
                        func = function()
                            local copied_joker = copy_card(target_joker, nil, nil, nil, target_joker.edition and target_joker.edition.negative)
                        copied_joker:set_edition("e_negative", true)
                            copied_joker:add_to_deck()
                            G.jokers:emplace(copied_joker)
                            return true
                        end
                    }))
                    card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "WHOS THAT JOKER?", colour = G.C.GREEN})
                end
                    return true
                end}, card)
                    end
        end
    end
}

SMODS.Joker{ --This joker is great!
    name = "This joker is great!",
    key = "thisjokerisgreat",
    config = {
        extra = {
            Oddities = 1
        }
    },
    loc_txt = {
        ['name'] = 'This joker is great!',
        ['text'] = {
            [1] = 'This joker gains {X:red,C:white}X0.25{} mult',
            [2] = 'if played hand is only {C:common}odd rank{} cards',
            [3] = '{C:inactive,E:1}or is it?{}',
            [4] = '{C:inactive}(currently {}{X:red,C:white}X#1#{} {C:inactive}Mult){}'
        }
    },
    pos = {
        x = 0,
        y = 3
    },
    cost = 7,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.Oddities}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if (function()
    local allMatchRank = true
    for i, c in ipairs(context.full_hand) do
        if not ((c:get_id() == 14 or c:get_id() == 3 or c:get_id() == 5 or c:get_id() == 7 or c:get_id() == 9)) then
            allMatchRank = false
            break
        end
    end
    
    return allMatchRank and #context.full_hand > 0
end)() then
                card.ability.extra.Oddities = (card.ability.extra.Oddities) + 0.25
                return {
                    Xmult = card.ability.extra.Oddities
                }
            else
                return {
                    Xmult = card.ability.extra.Oddities
                }
            end
        end
    end
}

SMODS.Joker{ --Thats Just a Joker
    name = "Thats Just a Joker",
    key = "thatsjustajoker",
    config = {
        extra = {
            JOKER = 1,
            value_min = 1,
            value_max = 5
        }
    },
    loc_txt = {
        ['name'] = 'Thats Just a Joker',
        ['text'] = {
            [1] = '{s:3}BROKEN{}'
        }
    },
    pos = {
        x = 1,
        y = 3
    },
    cost = 8,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    in_pool = function(self, args)
        return false
    end,

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
                card.ability.extra.JOKER = pseudorandom('JOKER_cbca5904', 1, 5)
        end
    end,

    calculate = function(self, card, context)
        local target_joker = nil
        
        target_joker = G.jokers.cards[JOKER]
        if target_joker == card then
            target_joker = nil
        end
        
        return SMODS.blueprint_effect(card, target_joker, context)
    end
}

SMODS.Joker{ --Jokerbrot
    name = "Jokerbrot",
    key = "jokerbrot",
    config = {
        extra = {
        }
    },
    loc_txt = {
        ['name'] = 'Jokerbrot',
        ['text'] = {
            [1] = 'Copies {C:attention}ability{} of {C:attention}second joker{} twice',
            [2] = '{C:inactive,s:2}(BROKEN){}'
        }
    },
    pos = {
        x = 2,
        y = 3
    },
    cost = 12,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    in_pool = function(self, args)
        return false
    end,

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end
}

SMODS.Joker{ --Pale Joker
    name = "Pale Joker",
    key = "palejoker",
    config = {
        extra = {
            vara = 0
        }
    },
    loc_txt = {
        ['name'] = 'Pale Joker',
        ['text'] = {
            [1] = 'On death, this joker {C:attention}destroys{} itself',
            [2] = 'and {C:attention}revives{} the {E:1}player{}'
        }
    },
    pos = {
        x = 3,
        y = 3
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = false,
    eternal_compat = false,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.end_of_round and context.game_over and context.main_eval and not context.blueprint then
                return {
                    func = function()
                card:start_dissolve()
                return true
            end,
                    message = "Destroyed!",
                    extra = {
                        saved = true,
                            message = "RESPAWN!",
                        colour = G.C.RED
                        }
                }
        end
    end
}

SMODS.Joker{ --Cokeblock4043
    name = "Cokeblock4043",
    key = "cokeblock4043",
    config = {
        extra = {
            blocmult = 1,
            var1 = 0
        }
    },
    loc_txt = {
        ['name'] = 'Cokeblock4043',
        ['text'] = {
            [1] = 'Gains {X:red,C:white}X0.443{} Mult if played hand',
            [2] = '{C:attention}contains{} a 4, Ace, or 3',
            [3] = 'If played hand contains all 3,',
            [4] = 'gains {X:red,C:white}X4.43{} Mult instead',
            [5] = '{C:inactive}(currently{} {X:red,C:white}X#1#{} {C:inactive}Mult){}',
            [6] = '{C:inactive}(cards do not need to score){}'
        }
    },
    pos = {
        x = 4,
        y = 3
    },
    cost = 20,
    rarity = 4,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',
    soul_pos = {
        x = 5,
        y = 3
    },

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.blocmult}}
    end,

    calculate = function(self, card, context)
        if context.cardarea == G.jokers and context.joker_main then
            if (function()
    local rankCount = 0
    for i, c in ipairs(context.scoring_hand) do
        if c:get_id() == 4 then
            rankCount = rankCount + 1
        end
    end
    
    return rankCount >= 1
end)() then
                card.ability.extra.blocmult = (card.ability.extra.blocmult) + 0.443
                return {
                    message = "NOPE!",
                    extra = {
                        Xmult = card.ability.extra.blocmult
                        }
                }
            elseif (function()
    local rankCount = 0
    for i, c in ipairs(context.scoring_hand) do
        if c:get_id() == 3 then
            rankCount = rankCount + 1
        end
    end
    
    return rankCount >= 1
end)() then
                card.ability.extra.blocmult = (card.ability.extra.blocmult) + 0.443
                return {
                    message = "HUH?!",
                    extra = {
                        Xmult = card.ability.extra.blocmult
                        }
                }
            elseif (function()
    local rankCount = 0
    for i, c in ipairs(context.scoring_hand) do
        if c:get_id() == 14 then
            rankCount = rankCount + 1
        end
    end
    
    return rankCount >= 1
end)() then
                card.ability.extra.blocmult = (card.ability.extra.blocmult) + 0.443
                return {
                    message = "MULTED",
                    extra = {
                        Xmult = card.ability.extra.blocmult
                        }
                }
            elseif ((function()
    local rankCount = 0
    for i, c in ipairs(context.full_hand) do
        if c:get_id() == 4 then
            rankCount = rankCount + 1
        end
    end
    
    return rankCount >= 1
end)() and (function()
    local rankCount = 0
    for i, c in ipairs(context.full_hand) do
        if c:get_id() == 3 then
            rankCount = rankCount + 1
        end
    end
    
    return rankCount >= 1
end)() and (function()
    local rankCount = 0
    for i, c in ipairs(context.scoring_hand) do
        if c:get_id() == 14 then
            rankCount = rankCount + 1
        end
    end
    
    return rankCount >= 1
end)()) then
                card.ability.extra.blocmult = (card.ability.extra.blocmult) + 4.43
                return {
                    message = "REFERENCE?",
                    extra = {
                        Xmult = card.ability.extra.blocmult
                        }
                }
            else
                return {
                    Xmult = card.ability.extra.var1,
                    message = "KABOOM!"
                }
            end
        end
    end
}

SMODS.Joker{ --recycling bin
    name = "recycling bin",
    key = "recyclingbin",
    config = {
        extra = {
            Xmult = 3
        }
    },
    loc_txt = {
        ['name'] = 'recycling bin',
        ['text'] = {
            [1] = 'Every scored {C:attention}7{} of spades',
            [2] = 'gives {X:red,C:white}X3{} Mult',
            [3] = '{C:inactive,E:2}hey, their good now!{}'
        }
    },
    pos = {
        x = 6,
        y = 3
    },
    cost = 10,
    rarity = 3,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.individual and context.cardarea == G.play and not context.blueprint then
            if (context.other_card:get_id() == 7 and context.other_card:is_suit("Spades")) then
                return {
                    Xmult = card.ability.extra.Xmult,
                    message = "TRASH!"
                }
            end
        end
    end
}

SMODS.Joker{ --Fancy spade
    name = "Fancy spade",
    key = "fancyspade",
    config = {
        extra = {
            odds = 2,
            repetitions = 1
        }
    },
    loc_txt = {
        ['name'] = 'Fancy spade',
        ['text'] = {
            [1] = '{C:green}1 in 2 chance{} to {C:attention}Retrigger{} all scored',
            [2] = 'cards with {C:attention}Spade{} suit'
        }
    },
    pos = {
        x = 7,
        y = 3
    },
    cost = 6,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.repetition and context.cardarea == G.play then
            if context.other_card:is_suit("Spades") then
                if pseudorandom('group_0_e851a0a1') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({repetitions = card.ability.extra.repetitions}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "AGAIN!", colour = G.C.RED})
                    end
            end
        end
    end
}

SMODS.Joker{ --Balancing act
    name = "Balancing act",
    key = "balancingact",
    config = {
        extra = {
            Balance = 1
        }
    },
    loc_txt = {
        ['name'] = 'Balancing act',
        ['text'] = {
            [1] = 'Gains {X:red,C:white}X1{} Mult at end of shop',
            [2] = 'Resets at {X:red,C:white}X10{} Mult',
            [3] = '{C:inactive}(currently{} {X:red,C:white}X#1#{} {C:inactive}Mult){}'
        }
    },
    pos = {
        x = 8,
        y = 3
    },
    cost = 4,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {card.ability.extra.Balance}}
    end,

    calculate = function(self, card, context)
        if context.ending_shop and not context.blueprint then
            if (card.ability.extra.Balance or 0) < 11 then
                return {
                    func = function()
                    card.ability.extra.Balance = (card.ability.extra.Balance) + 1
                    return true
                end,
                    message = "X1 MULT!"
                }
            elseif (card.ability.extra.Balance or 0) >= 11 then
                return {
                    func = function()
                    card.ability.extra.Balance = 1
                    return true
                end,
                    message = "RESET!"
                }
            end
        end
        if context.cardarea == G.jokers and context.joker_main then
                return {
                    Xmult = card.ability.extra.Balance
                }
        end
    end
}

SMODS.Joker{ --Fancy heart
    name = "Fancy heart",
    key = "fancyheart",
    config = {
        extra = {
            repetitions = 1
        }
    },
    loc_txt = {
        ['name'] = 'Fancy heart',
        ['text'] = {
            [1] = '{C:green}1 in 2 chance{} to {C:attention}Retrigger{} all scored',
            [2] = 'cards with {C:hearts}Heart{} suit'
        }
    },
    pos = {
        x = 9,
        y = 3
    },
    cost = 6,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.repetition and context.cardarea == G.play then
            if context.other_card:is_suit("Hearts") then
                return {
                    repetitions = card.ability.extra.repetitions,
                    message = "AGAIN!"
                }
            end
        end
    end
}

SMODS.Joker{ --Fancy club
    name = "Fancy club",
    key = "fancyclub",
    config = {
        extra = {
            odds = 2,
            repetitions = 1
        }
    },
    loc_txt = {
        ['name'] = 'Fancy club',
        ['text'] = {
            [1] = '{C:green}1 in 2 chance{} to {C:attention}Retrigger{} all scored',
            [2] = 'cards with {C:clubs}Club{} suit'
        }
    },
    pos = {
        x = 0,
        y = 4
    },
    cost = 6,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.repetition and context.cardarea == G.play then
            if context.other_card:is_suit("Clubs") then
                if pseudorandom('group_0_3e8e57c2') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({repetitions = card.ability.extra.repetitions}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "AGAIN!", colour = G.C.RED})
                    end
            end
        end
    end
}

SMODS.Joker{ --Fancy diamond
    name = "Fancy diamond",
    key = "fancydiamond",
    config = {
        extra = {
            odds = 2,
            repetitions = 1
        }
    },
    loc_txt = {
        ['name'] = 'Fancy diamond',
        ['text'] = {
            [1] = '{C:green}1 in 2 chance{} to {C:attention}Retrigger{} all scored',
            [2] = 'cards with {C:diamonds}Diamond{} suit'
        }
    },
    pos = {
        x = 1,
        y = 4
    },
    cost = 6,
    rarity = 1,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.repetition and context.cardarea == G.play then
            if context.other_card:is_suit("Diamonds") then
                if pseudorandom('group_0_c18e4760') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({repetitions = card.ability.extra.repetitions}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "AGAIN!", colour = G.C.RED})
                    end
            end
        end
    end
}

SMODS.Joker{ --Wild Re-Run
    name = "Wild Re-Run",
    key = "wildrerun",
    config = {
        extra = {
            odds = 2,
            repetitions = 1,
            repetitions1 = 1
        }
    },
    loc_txt = {
        ['name'] = 'Wild Re-Run',
        ['text'] = {
            [1] = '{C:attention}Retrigger{} all scored',
            [2] = 'cards with {C:attention,E:2}WILD{} suit 1 {C:attention}additional{} time',
            [3] = '{C:inactive}({C:green}1 in 2 chance{}{} {C:inactive}to {}{C:attention}retrigger {}{C:inactive}an additional time){}'
        }
    },
    pos = {
        x = 2,
        y = 4
    },
    cost = 5,
    rarity = 2,
    blueprint_compat = true,
    eternal_compat = true,
    unlocked = true,
    discovered = true,
    atlas = 'CustomJokers',

    loc_vars = function(self, info_queue, card)
        return {vars = {}}
    end,

    calculate = function(self, card, context)
        if context.repetition and context.cardarea == G.play then
            if SMODS.get_enhancements(context.other_card)["m_wild"] == true then
                return {
                    repetitions = card.ability.extra.repetitions,
                    message = "WILD!"
                ,
                    func = function()
                        if pseudorandom('group_0_49de21eb') < G.GAME.probabilities.normal / card.ability.extra.odds then
                        SMODS.calculate_effect({repetitions = card.ability.extra.repetitions1}, card)
                        card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = "LUCKY TRIGGER!", colour = G.C.RED})
                    end
                        return true
                    end
                }
            end
        end
    end
}